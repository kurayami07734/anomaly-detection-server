services:
  server:
    env_file:
      - ./.env
    build: .
    container_name: anomaly-detector-server
    command:
      [
        "uv",
        "run",
        "fastapi",
        "dev",
        "src/main.py",
        "--host",
        "0.0.0.0",
        "--port",
        "8000",
      ]
    volumes:
      - .:/app
      - /app/.venv
    ports:
      - 8000:8000
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  database:
    image: postgres:16.4
    container_name: anomaly-detector-db
    ports:
      - 5432:5432
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: anomaly_detector
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:6.2.6
    container_name: anomaly-detector-redis
    command: redis-server --appendonly yes
    ports:
      - 6379:6379
    restart: unless-stopped
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  app-network:
    driver: bridge
